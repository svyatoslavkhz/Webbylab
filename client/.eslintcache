[{"/Users/user/work/JavaScript projects/resume/webbylab/client/src/index.js":"1","/Users/user/work/JavaScript projects/resume/webbylab/client/src/reportWebVitals.js":"2","/Users/user/work/JavaScript projects/resume/webbylab/client/src/App.js":"3","/Users/user/work/JavaScript projects/resume/webbylab/client/src/components/Navbar.js":"4","/Users/user/work/JavaScript projects/resume/webbylab/client/src/pages/CreatePage.js":"5","/Users/user/work/JavaScript projects/resume/webbylab/client/src/pages/MainPage.js":"6","/Users/user/work/JavaScript projects/resume/webbylab/client/src/pages/EditPage.js":"7","/Users/user/work/JavaScript projects/resume/webbylab/client/src/pages/ImportPage.js":"8","/Users/user/work/JavaScript projects/resume/webbylab/client/src/hooks/http.hook.js":"9","/Users/user/work/JavaScript projects/resume/webbylab/client/src/hooks/message.hook.js":"10","/Users/user/work/JavaScript projects/resume/webbylab/client/src/pages/MoviePage.js":"11"},{"size":500,"mtime":1611849771000,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1611849771000,"results":"14","hashOfConfig":"13"},{"size":942,"mtime":1612034358000,"results":"15","hashOfConfig":"13"},{"size":652,"mtime":1611994620000,"results":"16","hashOfConfig":"13"},{"size":3202,"mtime":1612169476000,"results":"17","hashOfConfig":"13"},{"size":2647,"mtime":1612164427000,"results":"18","hashOfConfig":"13"},{"size":3301,"mtime":1612169461000,"results":"19","hashOfConfig":"13"},{"size":1782,"mtime":1612164372000,"results":"20","hashOfConfig":"13"},{"size":911,"mtime":1612033627000,"results":"21","hashOfConfig":"13"},{"size":198,"mtime":1611956060000,"results":"22","hashOfConfig":"13"},{"size":3052,"mtime":1612164220000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"sv0b60",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},"/Users/user/work/JavaScript projects/resume/webbylab/client/src/index.js",[],["50","51"],"/Users/user/work/JavaScript projects/resume/webbylab/client/src/reportWebVitals.js",[],"/Users/user/work/JavaScript projects/resume/webbylab/client/src/App.js",[],"/Users/user/work/JavaScript projects/resume/webbylab/client/src/components/Navbar.js",[],"/Users/user/work/JavaScript projects/resume/webbylab/client/src/pages/CreatePage.js",[],"/Users/user/work/JavaScript projects/resume/webbylab/client/src/pages/MainPage.js",["52","53"],"import React, { useCallback, useEffect, useState } from 'react';\nimport {NavLink} from 'react-router-dom';\nimport {useHttp} from '../hooks/http.hook';\n\n\n\nexport const MainPage = () => {\n\n    const [movies, setMovies] = useState([])\n    const [searchQuery, setQuery] = useState({query:''});\n    const {request} = useHttp();\n\n    const searchMovie = async () => {\n      try{\n          const search = await fetch('http://localhost:4000/api/movie/search', {method:\"POST\", body: JSON.stringify(searchQuery), headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n          }})\n          const info = await search.json();\n          setMovies(info)\n        }\n        catch (e) {\n        }\n      }\n\n    const fetchMovie = useCallback(async (param) => {\n      try{\n        const fetched = await request('/')\n        setMovies(fetched)\n      }\n      catch (e) {\n      }\n    }, request)\n\n    useEffect( () => {\n      fetchMovie();\n    }, [fetchMovie])\n\n    const searchHandler = (e) => {\n      setQuery({query: e.target.value.replace(/(<([^>]+)>)/gi, \"\")})\n    }    \n\n    return (<div>\n              <div className=\"title\">\n                <h1>Фильмы</h1> \n                <div class=\"input-field col s12\">\n                <input id=\"textarea1\" \n                  class=\"materialize-textarea\" \n                  value={searchQuery.query}\n                  onChange={searchHandler}\n                  placeholder=\"Поиск\"\n                />\n                <button \n                  onClick={searchMovie}>\n                  Поиск\n                </button>\n                </div>\n                </div>    \n                \n              <div class=\"row\">\n              <div class=\"col s12 m12 mainMovies\">\n                {movies.length>0 && movies.map( (e) => {\n                  return (\n                      <div class=\"card blue-grey darken-1\">\n                      <div class=\"card-content white-text\">\n                        <span class=\"card-title\">{e.title}</span>\n                        <p>В ролях: {e.actors.map( (actor, index) => {\n                          return (\n                          <span className=\"actor\">{index>0 && ', '}{actor}</span>)})}</p>\n                        <p>{e.year}</p>                      \n                        <p>{e.format}</p>\n                        </div>\n                      <div class=\"card-action\">\n                        <NavLink to={`/movie/${e._id}`}>Подробнее</NavLink>\n                      </div>\n                    </div>\n                  )\n                })\n                }\n              </div>\n              </div>\n            </div>\n    )\n}","/Users/user/work/JavaScript projects/resume/webbylab/client/src/pages/EditPage.js",[],"/Users/user/work/JavaScript projects/resume/webbylab/client/src/pages/ImportPage.js",["54"],"import React from 'react';\nimport {useMessage} from '../hooks/message.hook'\n\n\nexport const ImportPage = () => {\n\n    const message = useMessage();\n    const unificate = {\n      'Title':'title',\n      'Release Year':'year',\n      'Format':'format',\n      'Stars':'stars'\n    };\n\n    const uploadData = async (filmObcject) => {\n        try{\n\n            if (filmObcject.title && filmObcject.year && filmObcject.format && filmObcject.stars) {\n\n            const search = await fetch('http://localhost:4000/api/movie/upload', {method:\"POST\", body: JSON.stringify(filmObcject), headers: {\n              'Content-Type': 'application/json;charset=utf-8'\n            }})\n            }\n          }\n          catch (e) {\n            message('Что-то пошло не так')\n          }\n        }\n\n    const showFile = (e) => {\n        e.preventDefault()\n        const reader = new FileReader()\n        reader.onload = (e) => { \n            const text = (e.target.result)\n            let strFilms = text.split(/\\n{2,}/);\n            if (!strFilms[strFilms.length-1]) strFilms.pop();\n            return strFilms.map(film => {\n                    const fields = film.split(/\\n/);\n                    return fields.reduce((obj, field)=>{\n                        const arrField = field.split(/:/);\n                        obj[unificate[arrField[0]]]=arrField[1].trim();\n                        uploadData(obj)\n                        return obj;\n                    },{});\n                }\n            );\n        };\n        reader.readAsText(e.target.files[0])\n        message('Импортировано')\n  }\n\n\n    return (<div>\n               <h1>Загрузить данные из файла</h1>\n               <input type=\"file\" onChange={(e) => showFile(e)} />\n            </div>)\n}","/Users/user/work/JavaScript projects/resume/webbylab/client/src/hooks/http.hook.js",[],"/Users/user/work/JavaScript projects/resume/webbylab/client/src/hooks/message.hook.js",[],"/Users/user/work/JavaScript projects/resume/webbylab/client/src/pages/MoviePage.js",["55","56"],"import React, { useState, useEffect, useCallback } from 'react';\nimport {useHttp} from '../hooks/http.hook'\nimport {useMessage} from '../hooks/message.hook'\nimport {useHistory, useParams} from 'react-router-dom';\n\nexport const MoviePage = () => {\n\n\n    const {request} = useHttp();\n    const message = useMessage();\n    const history = useHistory();\n    const slug = useParams();\n    const [btnDlt, setBtnDlt] = useState(false)\n    const [movie, setMovie] = useState({\n       _id:null, title:'', year: null, format:'', actors:[]\n    });\n\n    const getMovie = useCallback( async () => {\n        try {\n            const fetched = await request(`/${slug.id}`);\n\n            setMovie(fetched)\n        \n        } catch (e) {\n            message('Ошибка')\n        } \n    }, request);\n\n    useEffect( () => {\n        getMovie()\n    }, [getMovie])\n\n    const deleteMovie = async() => {\n        try{            \n            const fetched = await request(`/delete/${slug.id}`, 'DELETE', {}, {});\n\n            message(fetched.message)\n            history.push('/')\n        } catch (e) {\n            message('Удаление не возможно')\n        }\n    }\n\n    const editPage = () => {\n        history.push(`/edit/${movie._id}`)\n    }\n\n    const bthHandler = () => {\n        setBtnDlt(!btnDlt)\n    }\n\n    return (\n            <div className=\"moviePage\">\n                <div className=\"imageMovie\"></div>\n                <h1>{movie.title}</h1>\n                    <div>\n                     <p>В ролях: {movie.actors.map( (actor, index) => {\n                          return (\n                          <span className=\"actor\">{index>0 && ', '}{actor}</span>)})}</p>\n                    </div>\n                        <div>\n                          <p>{movie.year} год.</p>\n                        </div>\n                        <div>\n                          <p>Формат: {movie.format}</p>\n                        </div>\n                        <div className=\"btn-adm\">\n                        <button\n                            onClick={editPage}\n                            className=\"btn-edit\">\n                            Редактировать\n                        </button>\n                        <div className=\"btn-delete\">\n                            <button\n                                onClick={bthHandler}>\n                                Удалить\n                            </button>\n                                {btnDlt && <div><p>Вы точно хотите удалить?</p>\n                                <button\n                                  onClick={bthHandler}>\n                                  нет\n                                </button>\n                                <button\n                                onClick={deleteMovie}>\n                                Да\n                                </button>\n                                </div>\n                                }\n                        </div>\n                        </div>\n            </div>\n    )\n}",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":32,"column":8,"nodeType":"63","endLine":32,"endColumn":15},{"ruleId":"61","severity":1,"message":"64","line":32,"column":8,"nodeType":"63","endLine":32,"endColumn":15,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":20,"column":19,"nodeType":"63","messageId":"68","endLine":20,"endColumn":25},{"ruleId":"61","severity":1,"message":"62","line":27,"column":8,"nodeType":"63","endLine":27,"endColumn":15},{"ruleId":"61","severity":1,"message":"69","line":27,"column":8,"nodeType":"63","endLine":27,"endColumn":15,"suggestions":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"react-hooks/exhaustive-deps","React Hook useCallback was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","Identifier","React Hook useCallback has a missing dependency: 'request'. Either include it or remove the dependency array.",["73"],"no-unused-vars","'search' is assigned a value but never used.","unusedVar","React Hook useCallback has missing dependencies: 'message', 'request', and 'slug.id'. Either include them or remove the dependency array.",["74"],"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [request]",{"range":"79","text":"80"},"Update the dependencies array to be: [message, request, slug.id]",{"range":"81","text":"82"},[884,891],"[request]",[768,775],"[message, request, slug.id]"]